# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class CompressSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CompressSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'category_occurence': 'int',
            'data_set_occurence': 'int',
            'operator': 'str'
        }

        self.attribute_map = {
            'category_occurence': 'CategoryOccurence',
            'data_set_occurence': 'DataSetOccurence',
            'operator': 'Operator'
        }


        self._category_occurence = None

        self._data_set_occurence = None

        self._operator = None



    @property
    def category_occurence(self):
        """
        Gets the category_occurence of this CompressSettings.
        

        :return: The category_occurence of this CompressSettings.
        :rtype: int
        """
        return self._category_occurence

    @category_occurence.setter
    def category_occurence(self, category_occurence):
        """
        Sets the category_occurence of this CompressSettings.
        

        :param category_occurence: The category_occurence of this CompressSettings.
        :type: int
        """
        self._category_occurence = category_occurence


    @property
    def data_set_occurence(self):
        """
        Gets the data_set_occurence of this CompressSettings.
        

        :return: The data_set_occurence of this CompressSettings.
        :rtype: int
        """
        return self._data_set_occurence

    @data_set_occurence.setter
    def data_set_occurence(self, data_set_occurence):
        """
        Sets the data_set_occurence of this CompressSettings.
        

        :param data_set_occurence: The data_set_occurence of this CompressSettings.
        :type: int
        """
        self._data_set_occurence = data_set_occurence


    @property
    def operator(self):
        """
        Gets the operator of this CompressSettings.
        

        :return: The operator of this CompressSettings.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """
        Sets the operator of this CompressSettings.
        

        :param operator: The operator of this CompressSettings.
        :type: str
        """
        allowed_values = ["AND", "OR"]
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator`, must be one of {0}"
                .format(allowed_values)
            )
        self._operator = operator


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



