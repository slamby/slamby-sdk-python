# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class FileParserResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FileParserResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'content': 'str',
            'title': 'str',
            'date': 'str',
            'author': 'str',
            'keywords': 'str',
            'content_type': 'str',
            'content_length': 'int',
            'language': 'str'
        }

        self.attribute_map = {
            'content': 'Content',
            'title': 'Title',
            'date': 'Date',
            'author': 'Author',
            'keywords': 'Keywords',
            'content_type': 'ContentType',
            'content_length': 'ContentLength',
            'language': 'Language'
        }


        self._content = None

        self._title = None

        self._date = None

        self._author = None

        self._keywords = None

        self._content_type = None

        self._content_length = None

        self._language = None



    @property
    def content(self):
        """
        Gets the content of this FileParserResult.
        The text content of sent document. Can be empty.

        :return: The content of this FileParserResult.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """
        Sets the content of this FileParserResult.
        The text content of sent document. Can be empty.

        :param content: The content of this FileParserResult.
        :type: str
        """
        self._content = content


    @property
    def title(self):
        """
        Gets the title of this FileParserResult.
        The title of the document. Can be null or empty.

        :return: The title of this FileParserResult.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this FileParserResult.
        The title of the document. Can be null or empty.

        :param title: The title of this FileParserResult.
        :type: str
        """
        self._title = title


    @property
    def date(self):
        """
        Gets the date of this FileParserResult.


        :return: The date of this FileParserResult.
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this FileParserResult.


        :param date: The date of this FileParserResult.
        :type: str
        """
        self._date = date


    @property
    def author(self):
        """
        Gets the author of this FileParserResult.
        The author of the document. Can be null or empty.

        :return: The author of this FileParserResult.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """
        Sets the author of this FileParserResult.
        The author of the document. Can be null or empty.

        :param author: The author of this FileParserResult.
        :type: str
        """
        self._author = author


    @property
    def keywords(self):
        """
        Gets the keywords of this FileParserResult.
        Keywords of the document. Can be null or empty.

        :return: The keywords of this FileParserResult.
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """
        Sets the keywords of this FileParserResult.
        Keywords of the document. Can be null or empty.

        :param keywords: The keywords of this FileParserResult.
        :type: str
        """
        self._keywords = keywords


    @property
    def content_type(self):
        """
        Gets the content_type of this FileParserResult.
        The type of the document (e.g.: application/pdf). Can be empty.

        :return: The content_type of this FileParserResult.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """
        Sets the content_type of this FileParserResult.
        The type of the document (e.g.: application/pdf). Can be empty.

        :param content_type: The content_type of this FileParserResult.
        :type: str
        """
        self._content_type = content_type


    @property
    def content_length(self):
        """
        Gets the content_length of this FileParserResult.
        The length of the received document.

        :return: The content_length of this FileParserResult.
        :rtype: int
        """
        return self._content_length

    @content_length.setter
    def content_length(self, content_length):
        """
        Sets the content_length of this FileParserResult.
        The length of the received document.

        :param content_length: The content_length of this FileParserResult.
        :type: int
        """
        self._content_length = content_length


    @property
    def language(self):
        """
        Gets the language of this FileParserResult.
        Detected language of the document (e.g.: en). Can be empty.

        :return: The language of this FileParserResult.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """
        Sets the language of this FileParserResult.
        Detected language of the document (e.g.: en). Can be empty.

        :param language: The language of this FileParserResult.
        :type: str
        """
        self._language = language


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



