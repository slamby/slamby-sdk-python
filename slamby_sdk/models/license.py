# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class License(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        License - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'is_valid': 'bool',
            'message': 'str',
            'type': 'str',
            'base64': 'str'
        }

        self.attribute_map = {
            'is_valid': 'IsValid',
            'message': 'Message',
            'type': 'Type',
            'base64': 'Base64'
        }


        self._is_valid = None

        self._message = None

        self._type = None

        self._base64 = None



    @property
    def is_valid(self):
        """
        Gets the is_valid of this License.


        :return: The is_valid of this License.
        :rtype: bool
        """
        return self._is_valid

    @is_valid.setter
    def is_valid(self, is_valid):
        """
        Sets the is_valid of this License.


        :param is_valid: The is_valid of this License.
        :type: bool
        """
        self._is_valid = is_valid


    @property
    def message(self):
        """
        Gets the message of this License.


        :return: The message of this License.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """
        Sets the message of this License.


        :param message: The message of this License.
        :type: str
        """
        self._message = message


    @property
    def type(self):
        """
        Gets the type of this License.


        :return: The type of this License.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this License.


        :param type: The type of this License.
        :type: str
        """
        self._type = type


    @property
    def base64(self):
        """
        Gets the base64 of this License.


        :return: The base64 of this License.
        :rtype: str
        """
        return self._base64

    @base64.setter
    def base64(self, base64):
        """
        Sets the base64 of this License.


        :param base64: The base64 of this License.
        :type: str
        """
        self._base64 = base64


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



