# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class Pagination(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Pagination - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'offset': 'int',
            'limit': 'int',
            'order_direction': 'str',
            'order_by_field': 'str'
        }

        self.attribute_map = {
            'offset': 'Offset',
            'limit': 'Limit',
            'order_direction': 'OrderDirection',
            'order_by_field': 'OrderByField'
        }


        self._offset = None

        self._limit = None

        self._order_direction = None

        self._order_by_field = None



    @property
    def offset(self):
        """
        Gets the offset of this Pagination.


        :return: The offset of this Pagination.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """
        Sets the offset of this Pagination.


        :param offset: The offset of this Pagination.
        :type: int
        """
        self._offset = offset


    @property
    def limit(self):
        """
        Gets the limit of this Pagination.


        :return: The limit of this Pagination.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """
        Sets the limit of this Pagination.


        :param limit: The limit of this Pagination.
        :type: int
        """
        self._limit = limit


    @property
    def order_direction(self):
        """
        Gets the order_direction of this Pagination.


        :return: The order_direction of this Pagination.
        :rtype: str
        """
        return self._order_direction

    @order_direction.setter
    def order_direction(self, order_direction):
        """
        Sets the order_direction of this Pagination.


        :param order_direction: The order_direction of this Pagination.
        :type: str
        """
        allowed_values = ["Asc", "Desc"]
        if order_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `order_direction`, must be one of {0}"
                .format(allowed_values)
            )
        self._order_direction = order_direction


    @property
    def order_by_field(self):
        """
        Gets the order_by_field of this Pagination.


        :return: The order_by_field of this Pagination.
        :rtype: str
        """
        return self._order_by_field

    @order_by_field.setter
    def order_by_field(self, order_by_field):
        """
        Sets the order_by_field of this Pagination.


        :param order_by_field: The order_by_field of this Pagination.
        :type: str
        """
        self._order_by_field = order_by_field


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



