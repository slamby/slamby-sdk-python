# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class ClassifierRecommendationResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ClassifierRecommendationResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'tag_id': 'str',
            'score': 'float',
            'tag': 'Tag',
            'is_emphasized': 'bool'
        }

        self.attribute_map = {
            'tag_id': 'TagId',
            'score': 'Score',
            'tag': 'Tag',
            'is_emphasized': 'IsEmphasized'
        }


        self._tag_id = None

        self._score = None

        self._tag = None

        self._is_emphasized = None



    @property
    def tag_id(self):
        """
        Gets the tag_id of this ClassifierRecommendationResult.
        The recommended tag id

        :return: The tag_id of this ClassifierRecommendationResult.
        :rtype: str
        """
        return self._tag_id

    @tag_id.setter
    def tag_id(self, tag_id):
        """
        Sets the tag_id of this ClassifierRecommendationResult.
        The recommended tag id

        :param tag_id: The tag_id of this ClassifierRecommendationResult.
        :type: str
        """
        self._tag_id = tag_id


    @property
    def score(self):
        """
        Gets the score of this ClassifierRecommendationResult.
        The score that belongs to the tag id

        :return: The score of this ClassifierRecommendationResult.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """
        Sets the score of this ClassifierRecommendationResult.
        The score that belongs to the tag id

        :param score: The score of this ClassifierRecommendationResult.
        :type: float
        """
        self._score = score


    @property
    def tag(self):
        """
        Gets the tag of this ClassifierRecommendationResult.


        :return: The tag of this ClassifierRecommendationResult.
        :rtype: Tag
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """
        Sets the tag of this ClassifierRecommendationResult.


        :param tag: The tag of this ClassifierRecommendationResult.
        :type: Tag
        """
        self._tag = tag


    @property
    def is_emphasized(self):
        """
        Gets the is_emphasized of this ClassifierRecommendationResult.
        If there was applied emphasizing by this tag

        :return: The is_emphasized of this ClassifierRecommendationResult.
        :rtype: bool
        """
        return self._is_emphasized

    @is_emphasized.setter
    def is_emphasized(self, is_emphasized):
        """
        Sets the is_emphasized of this ClassifierRecommendationResult.
        If there was applied emphasizing by this tag

        :param is_emphasized: The is_emphasized of this ClassifierRecommendationResult.
        :type: bool
        """
        self._is_emphasized = is_emphasized


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



