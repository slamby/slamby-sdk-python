# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class Process(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Process - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'start': 'datetime',
            'end': 'datetime',
            'percent': 'float',
            'description': 'str',
            'status': 'str',
            'type': 'str',
            'error_messages': 'list[str]',
            'result_message': 'str'
        }

        self.attribute_map = {
            'id': 'Id',
            'start': 'Start',
            'end': 'End',
            'percent': 'Percent',
            'description': 'Description',
            'status': 'Status',
            'type': 'Type',
            'error_messages': 'ErrorMessages',
            'result_message': 'ResultMessage'
        }


        self._id = None

        self._start = None

        self._end = None

        self._percent = None

        self._description = None

        self._status = None

        self._type = None

        self._error_messages = None

        self._result_message = None



    @property
    def id(self):
        """
        Gets the id of this Process.
        The process GUID identifier

        :return: The id of this Process.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Process.
        The process GUID identifier

        :param id: The id of this Process.
        :type: str
        """
        self._id = id


    @property
    def start(self):
        """
        Gets the start of this Process.
        The UTC time of the process start

        :return: The start of this Process.
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """
        Sets the start of this Process.
        The UTC time of the process start

        :param start: The start of this Process.
        :type: datetime
        """
        self._start = start


    @property
    def end(self):
        """
        Gets the end of this Process.
        The UTC time of the process end

        :return: The end of this Process.
        :rtype: datetime
        """
        return self._end

    @end.setter
    def end(self, end):
        """
        Sets the end of this Process.
        The UTC time of the process end

        :param end: The end of this Process.
        :type: datetime
        """
        self._end = end


    @property
    def percent(self):
        """
        Gets the percent of this Process.
        The percent of the whole process. (e.g.: 12.23 means 12.23%)

        :return: The percent of this Process.
        :rtype: float
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """
        Sets the percent of this Process.
        The percent of the whole process. (e.g.: 12.23 means 12.23%)

        :param percent: The percent of this Process.
        :type: float
        """
        self._percent = percent


    @property
    def description(self):
        """
        Gets the description of this Process.
        Process description

        :return: The description of this Process.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Process.
        Process description

        :param description: The description of this Process.
        :type: str
        """
        self._description = description


    @property
    def status(self):
        """
        Gets the status of this Process.
        InProgress - the process is in progress, it's working |\r\nCancelled - the process was cancelled by the user |\r\nFinished - the process was finished successfully |\r\nError - the process stopped by an error, see the ErrorMessages for detailed information |\r\nInterrupted - the process was interrupted by an unknown event (e.g.: server restart) - under development |\r\nPaused - the process was paused  - under development

        :return: The status of this Process.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Process.
        InProgress - the process is in progress, it's working |\r\nCancelled - the process was cancelled by the user |\r\nFinished - the process was finished successfully |\r\nError - the process stopped by an error, see the ErrorMessages for detailed information |\r\nInterrupted - the process was interrupted by an unknown event (e.g.: server restart) - under development |\r\nPaused - the process was paused  - under development

        :param status: The status of this Process.
        :type: str
        """
        allowed_values = ["InProgress", "Cancelled", "Finished", "Error", "Interrupted", "Paused", "Cancelling"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status`, must be one of {0}"
                .format(allowed_values)
            )
        self._status = status


    @property
    def type(self):
        """
        Gets the type of this Process.
        Type of the process

        :return: The type of this Process.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Process.
        Type of the process

        :param type: The type of this Process.
        :type: str
        """
        allowed_values = ["ClassifierPrepare", "PrcPrepare", "ClassifierExportDictionaries", "PrcExportDictionaries", "TagsExportWords", "ClassifierActivate", "PrcActivate", "PrcIndex", "PrcIndexPartial", "DocumentsCopy", "DocumentsMove", "SearchPrepare", "SearchActivate"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type`, must be one of {0}"
                .format(allowed_values)
            )
        self._type = type


    @property
    def error_messages(self):
        """
        Gets the error_messages of this Process.


        :return: The error_messages of this Process.
        :rtype: list[str]
        """
        return self._error_messages

    @error_messages.setter
    def error_messages(self, error_messages):
        """
        Sets the error_messages of this Process.


        :param error_messages: The error_messages of this Process.
        :type: list[str]
        """
        self._error_messages = error_messages


    @property
    def result_message(self):
        """
        Gets the result_message of this Process.


        :return: The result_message of this Process.
        :rtype: str
        """
        return self._result_message

    @result_message.setter
    def result_message(self, result_message):
        """
        Sets the result_message of this Process.


        :param result_message: The result_message of this Process.
        :type: str
        """
        self._result_message = result_message


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



