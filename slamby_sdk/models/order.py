# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class Order(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Order - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'order_direction': 'str',
            'order_by_field': 'str'
        }

        self.attribute_map = {
            'order_direction': 'OrderDirection',
            'order_by_field': 'OrderByField'
        }


        self._order_direction = None

        self._order_by_field = None



    @property
    def order_direction(self):
        """
        Gets the order_direction of this Order.
        The ordering of the list, Ascending or Descending

        :return: The order_direction of this Order.
        :rtype: str
        """
        return self._order_direction

    @order_direction.setter
    def order_direction(self, order_direction):
        """
        Sets the order_direction of this Order.
        The ordering of the list, Ascending or Descending

        :param order_direction: The order_direction of this Order.
        :type: str
        """
        allowed_values = ["Asc", "Desc"]
        if order_direction not in allowed_values:
            raise ValueError(
                "Invalid value for `order_direction`, must be one of {0}"
                .format(allowed_values)
            )
        self._order_direction = order_direction


    @property
    def order_by_field(self):
        """
        Gets the order_by_field of this Order.
        It must be an existing field. Declares the base of the ordering

        :return: The order_by_field of this Order.
        :rtype: str
        """
        return self._order_by_field

    @order_by_field.setter
    def order_by_field(self, order_by_field):
        """
        Sets the order_by_field of this Order.
        It must be an existing field. Declares the base of the ordering

        :param order_by_field: The order_by_field of this Order.
        :type: str
        """
        self._order_by_field = order_by_field


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



