# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class TagProperties(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TagProperties - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'path': 'list[PathItem]',
            'level': 'int',
            'is_leaf': 'bool',
            'document_count': 'int',
            'word_count': 'int'
        }

        self.attribute_map = {
            'path': 'Path',
            'level': 'Level',
            'is_leaf': 'IsLeaf',
            'document_count': 'DocumentCount',
            'word_count': 'WordCount'
        }


        self._path = None

        self._level = None

        self._is_leaf = None

        self._document_count = None

        self._word_count = None



    @property
    def path(self):
        """
        Gets the path of this TagProperties.


        :return: The path of this TagProperties.
        :rtype: list[PathItem]
        """
        return self._path

    @path.setter
    def path(self, path):
        """
        Sets the path of this TagProperties.


        :param path: The path of this TagProperties.
        :type: list[PathItem]
        """
        self._path = path


    @property
    def level(self):
        """
        Gets the level of this TagProperties.


        :return: The level of this TagProperties.
        :rtype: int
        """
        return self._level

    @level.setter
    def level(self, level):
        """
        Sets the level of this TagProperties.


        :param level: The level of this TagProperties.
        :type: int
        """
        self._level = level


    @property
    def is_leaf(self):
        """
        Gets the is_leaf of this TagProperties.


        :return: The is_leaf of this TagProperties.
        :rtype: bool
        """
        return self._is_leaf

    @is_leaf.setter
    def is_leaf(self, is_leaf):
        """
        Sets the is_leaf of this TagProperties.


        :param is_leaf: The is_leaf of this TagProperties.
        :type: bool
        """
        self._is_leaf = is_leaf


    @property
    def document_count(self):
        """
        Gets the document_count of this TagProperties.


        :return: The document_count of this TagProperties.
        :rtype: int
        """
        return self._document_count

    @document_count.setter
    def document_count(self, document_count):
        """
        Sets the document_count of this TagProperties.


        :param document_count: The document_count of this TagProperties.
        :type: int
        """
        self._document_count = document_count


    @property
    def word_count(self):
        """
        Gets the word_count of this TagProperties.


        :return: The word_count of this TagProperties.
        :rtype: int
        """
        return self._word_count

    @word_count.setter
    def word_count(self, word_count):
        """
        Sets the word_count of this TagProperties.


        :param word_count: The word_count of this TagProperties.
        :type: int
        """
        self._word_count = word_count


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



