# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class SearchRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        SearchRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'text': 'str',
            'auto_complete_settings': 'AutoCompleteSettings',
            'search_settings': 'SearchSettings',
            'classifier_settings': 'ClassifierSettings'
        }

        self.attribute_map = {
            'text': 'Text',
            'auto_complete_settings': 'AutoCompleteSettings',
            'search_settings': 'SearchSettings',
            'classifier_settings': 'ClassifierSettings'
        }


        self._text = None

        self._auto_complete_settings = None

        self._search_settings = None

        self._classifier_settings = None



    @property
    def text(self):
        """
        Gets the text of this SearchRequest.
        A simple text or a Query String query, depends on the Type of the search

        :return: The text of this SearchRequest.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this SearchRequest.
        A simple text or a Query String query, depends on the Type of the search

        :param text: The text of this SearchRequest.
        :type: str
        """
        self._text = text


    @property
    def auto_complete_settings(self):
        """
        Gets the auto_complete_settings of this SearchRequest.
        You can override the activated AutoCompleteSettings during each search. Null means the activated settings will be used

        :return: The auto_complete_settings of this SearchRequest.
        :rtype: AutoCompleteSettings
        """
        return self._auto_complete_settings

    @auto_complete_settings.setter
    def auto_complete_settings(self, auto_complete_settings):
        """
        Sets the auto_complete_settings of this SearchRequest.
        You can override the activated AutoCompleteSettings during each search. Null means the activated settings will be used

        :param auto_complete_settings: The auto_complete_settings of this SearchRequest.
        :type: AutoCompleteSettings
        """
        self._auto_complete_settings = auto_complete_settings


    @property
    def search_settings(self):
        """
        Gets the search_settings of this SearchRequest.
        You can override the activated SearchSettings during each search. Null means the activated settings will be used

        :return: The search_settings of this SearchRequest.
        :rtype: SearchSettings
        """
        return self._search_settings

    @search_settings.setter
    def search_settings(self, search_settings):
        """
        Sets the search_settings of this SearchRequest.
        You can override the activated SearchSettings during each search. Null means the activated settings will be used

        :param search_settings: The search_settings of this SearchRequest.
        :type: SearchSettings
        """
        self._search_settings = search_settings


    @property
    def classifier_settings(self):
        """
        Gets the classifier_settings of this SearchRequest.
        You can override the activated ClassifierSettings during each search. Null means the activated settings will be used

        :return: The classifier_settings of this SearchRequest.
        :rtype: ClassifierSettings
        """
        return self._classifier_settings

    @classifier_settings.setter
    def classifier_settings(self, classifier_settings):
        """
        Sets the classifier_settings of this SearchRequest.
        You can override the activated ClassifierSettings during each search. Null means the activated settings will be used

        :param classifier_settings: The classifier_settings of this SearchRequest.
        :type: ClassifierSettings
        """
        self._classifier_settings = classifier_settings


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



