# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class DocumentFilterSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DocumentFilterSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'pagination': 'Pagination',
            'ids_only': 'bool',
            'filter': 'Filter'
        }

        self.attribute_map = {
            'pagination': 'Pagination',
            'ids_only': 'IdsOnly',
            'filter': 'Filter'
        }


        self._pagination = None

        self._ids_only = None

        self._filter = None



    @property
    def pagination(self):
        """
        Gets the pagination of this DocumentFilterSettings.


        :return: The pagination of this DocumentFilterSettings.
        :rtype: Pagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """
        Sets the pagination of this DocumentFilterSettings.


        :param pagination: The pagination of this DocumentFilterSettings.
        :type: Pagination
        """
        self._pagination = pagination


    @property
    def ids_only(self):
        """
        Gets the ids_only of this DocumentFilterSettings.


        :return: The ids_only of this DocumentFilterSettings.
        :rtype: bool
        """
        return self._ids_only

    @ids_only.setter
    def ids_only(self, ids_only):
        """
        Sets the ids_only of this DocumentFilterSettings.


        :param ids_only: The ids_only of this DocumentFilterSettings.
        :type: bool
        """
        self._ids_only = ids_only


    @property
    def filter(self):
        """
        Gets the filter of this DocumentFilterSettings.


        :return: The filter of this DocumentFilterSettings.
        :rtype: Filter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """
        Sets the filter of this DocumentFilterSettings.


        :param filter: The filter of this DocumentFilterSettings.
        :type: Filter
        """
        self._filter = filter


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



