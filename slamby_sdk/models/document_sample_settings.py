# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class DocumentSampleSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DocumentSampleSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'tag_id_list': 'list[str]',
            'percent': 'float',
            'size': 'int',
            'field_list': 'list[str]'
        }

        self.attribute_map = {
            'id': 'Id',
            'tag_id_list': 'TagIdList',
            'percent': 'Percent',
            'size': 'Size',
            'field_list': 'FieldList'
        }


        self._id = None

        self._tag_id_list = None

        self._percent = None

        self._size = None

        self._field_list = None



    @property
    def id(self):
        """
        Gets the id of this DocumentSampleSettings.
        It must be a random string for every new sampling, but must be the same for the same sampling during pagination. \r\n            If you leave it empty then it'll be generated automatically, but then you can not use pagination

        :return: The id of this DocumentSampleSettings.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DocumentSampleSettings.
        It must be a random string for every new sampling, but must be the same for the same sampling during pagination. \r\n            If you leave it empty then it'll be generated automatically, but then you can not use pagination

        :param id: The id of this DocumentSampleSettings.
        :type: str
        """
        self._id = id


    @property
    def tag_id_list(self):
        """
        Gets the tag_id_list of this DocumentSampleSettings.
        You can create a sample from a whole dataset, or just from a given tag section. \r\n            To create a sample from the whole dataset please keep it empty. \r\n            To create a sample from a given number of tags please provide the tag ids

        :return: The tag_id_list of this DocumentSampleSettings.
        :rtype: list[str]
        """
        return self._tag_id_list

    @tag_id_list.setter
    def tag_id_list(self, tag_id_list):
        """
        Sets the tag_id_list of this DocumentSampleSettings.
        You can create a sample from a whole dataset, or just from a given tag section. \r\n            To create a sample from the whole dataset please keep it empty. \r\n            To create a sample from a given number of tags please provide the tag ids

        :param tag_id_list: The tag_id_list of this DocumentSampleSettings.
        :type: list[str]
        """
        self._tag_id_list = tag_id_list


    @property
    def percent(self):
        """
        Gets the percent of this DocumentSampleSettings.
        Defining the sample size, you can use percentage or a given number. \r\n            Using a percentage you can define the document number by a percentage. \r\n            This percentage will calculate the document number by using the available dataset document number. \r\n            E.g.: if your dataset contains 100.000 documents and you are using 10% as a sampling size without stratified method, your sample size is 100.000 x 10% = 10.000

        :return: The percent of this DocumentSampleSettings.
        :rtype: float
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """
        Sets the percent of this DocumentSampleSettings.
        Defining the sample size, you can use percentage or a given number. \r\n            Using a percentage you can define the document number by a percentage. \r\n            This percentage will calculate the document number by using the available dataset document number. \r\n            E.g.: if your dataset contains 100.000 documents and you are using 10% as a sampling size without stratified method, your sample size is 100.000 x 10% = 10.000

        :param percent: The percent of this DocumentSampleSettings.
        :type: float
        """
        self._percent = percent


    @property
    def size(self):
        """
        Gets the size of this DocumentSampleSettings.
        Define your sample size by providing a simple integer. \r\n            E.g.: if your dataset contains 100.000 documents and you are using 3.000 as a sampling size without stratified method, your sample size is 3.000

        :return: The size of this DocumentSampleSettings.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this DocumentSampleSettings.
        Define your sample size by providing a simple integer. \r\n            E.g.: if your dataset contains 100.000 documents and you are using 3.000 as a sampling size without stratified method, your sample size is 3.000

        :param size: The size of this DocumentSampleSettings.
        :type: int
        """
        self._size = size


    @property
    def field_list(self):
        """
        Gets the field_list of this DocumentSampleSettings.
        Query returns only with the specified field(s)

        :return: The field_list of this DocumentSampleSettings.
        :rtype: list[str]
        """
        return self._field_list

    @field_list.setter
    def field_list(self, field_list):
        """
        Sets the field_list of this DocumentSampleSettings.
        Query returns only with the specified field(s)

        :param field_list: The field_list of this DocumentSampleSettings.
        :type: list[str]
        """
        self._field_list = field_list


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



