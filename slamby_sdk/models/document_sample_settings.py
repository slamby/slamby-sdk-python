# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class DocumentSampleSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DocumentSampleSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'tag_ids': 'list[str]',
            'is_stratified': 'bool',
            'pagination': 'Pagination',
            'percent': 'float',
            'size': 'int',
            'ids_only': 'bool'
        }

        self.attribute_map = {
            'id': 'Id',
            'tag_ids': 'TagIds',
            'is_stratified': 'IsStratified',
            'pagination': 'Pagination',
            'percent': 'Percent',
            'size': 'Size',
            'ids_only': 'IdsOnly'
        }


        self._id = None

        self._tag_ids = None

        self._is_stratified = None

        self._pagination = None

        self._percent = None

        self._size = None

        self._ids_only = None



    @property
    def id(self):
        """
        Gets the id of this DocumentSampleSettings.


        :return: The id of this DocumentSampleSettings.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this DocumentSampleSettings.


        :param id: The id of this DocumentSampleSettings.
        :type: str
        """
        self._id = id


    @property
    def tag_ids(self):
        """
        Gets the tag_ids of this DocumentSampleSettings.


        :return: The tag_ids of this DocumentSampleSettings.
        :rtype: list[str]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """
        Sets the tag_ids of this DocumentSampleSettings.


        :param tag_ids: The tag_ids of this DocumentSampleSettings.
        :type: list[str]
        """
        self._tag_ids = tag_ids


    @property
    def is_stratified(self):
        """
        Gets the is_stratified of this DocumentSampleSettings.


        :return: The is_stratified of this DocumentSampleSettings.
        :rtype: bool
        """
        return self._is_stratified

    @is_stratified.setter
    def is_stratified(self, is_stratified):
        """
        Sets the is_stratified of this DocumentSampleSettings.


        :param is_stratified: The is_stratified of this DocumentSampleSettings.
        :type: bool
        """
        self._is_stratified = is_stratified


    @property
    def pagination(self):
        """
        Gets the pagination of this DocumentSampleSettings.


        :return: The pagination of this DocumentSampleSettings.
        :rtype: Pagination
        """
        return self._pagination

    @pagination.setter
    def pagination(self, pagination):
        """
        Sets the pagination of this DocumentSampleSettings.


        :param pagination: The pagination of this DocumentSampleSettings.
        :type: Pagination
        """
        self._pagination = pagination


    @property
    def percent(self):
        """
        Gets the percent of this DocumentSampleSettings.


        :return: The percent of this DocumentSampleSettings.
        :rtype: float
        """
        return self._percent

    @percent.setter
    def percent(self, percent):
        """
        Sets the percent of this DocumentSampleSettings.


        :param percent: The percent of this DocumentSampleSettings.
        :type: float
        """
        self._percent = percent


    @property
    def size(self):
        """
        Gets the size of this DocumentSampleSettings.


        :return: The size of this DocumentSampleSettings.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """
        Sets the size of this DocumentSampleSettings.


        :param size: The size of this DocumentSampleSettings.
        :type: int
        """
        self._size = size


    @property
    def ids_only(self):
        """
        Gets the ids_only of this DocumentSampleSettings.


        :return: The ids_only of this DocumentSampleSettings.
        :rtype: bool
        """
        return self._ids_only

    @ids_only.setter
    def ids_only(self, ids_only):
        """
        Sets the ids_only of this DocumentSampleSettings.


        :param ids_only: The ids_only of this DocumentSampleSettings.
        :type: bool
        """
        self._ids_only = ids_only


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



