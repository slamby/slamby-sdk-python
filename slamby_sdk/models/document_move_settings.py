# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class DocumentMoveSettings(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DocumentMoveSettings - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'document_id_list': 'list[str]',
            'target_data_set_name': 'str'
        }

        self.attribute_map = {
            'document_id_list': 'DocumentIdList',
            'target_data_set_name': 'TargetDataSetName'
        }


        self._document_id_list = None

        self._target_data_set_name = None



    @property
    def document_id_list(self):
        """
        Gets the document_id_list of this DocumentMoveSettings.
        The Id list of the documents you want to move

        :return: The document_id_list of this DocumentMoveSettings.
        :rtype: list[str]
        """
        return self._document_id_list

    @document_id_list.setter
    def document_id_list(self, document_id_list):
        """
        Sets the document_id_list of this DocumentMoveSettings.
        The Id list of the documents you want to move

        :param document_id_list: The document_id_list of this DocumentMoveSettings.
        :type: list[str]
        """
        self._document_id_list = document_id_list


    @property
    def target_data_set_name(self):
        """
        Gets the target_data_set_name of this DocumentMoveSettings.
        The DataSet name where you want to move the selected documents

        :return: The target_data_set_name of this DocumentMoveSettings.
        :rtype: str
        """
        return self._target_data_set_name

    @target_data_set_name.setter
    def target_data_set_name(self, target_data_set_name):
        """
        Sets the target_data_set_name of this DocumentMoveSettings.
        The DataSet name where you want to move the selected documents

        :param target_data_set_name: The target_data_set_name of this DocumentMoveSettings.
        :type: str
        """
        self._target_data_set_name = target_data_set_name


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



