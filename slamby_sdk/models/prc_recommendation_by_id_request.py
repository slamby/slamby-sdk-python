# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class PrcRecommendationByIdRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        PrcRecommendationByIdRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'document_id': 'str',
            'query': 'str',
            'count': 'int',
            'need_document_in_result': 'bool',
            'tag_id': 'str',
            'weights': 'list[Weight]'
        }

        self.attribute_map = {
            'document_id': 'DocumentId',
            'query': 'Query',
            'count': 'Count',
            'need_document_in_result': 'NeedDocumentInResult',
            'tag_id': 'TagId',
            'weights': 'Weights'
        }


        self._document_id = None

        self._query = None

        self._count = None

        self._need_document_in_result = None

        self._tag_id = None

        self._weights = None



    @property
    def document_id(self):
        """
        Gets the document_id of this PrcRecommendationByIdRequest.


        :return: The document_id of this PrcRecommendationByIdRequest.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """
        Sets the document_id of this PrcRecommendationByIdRequest.


        :param document_id: The document_id of this PrcRecommendationByIdRequest.
        :type: str
        """
        self._document_id = document_id


    @property
    def query(self):
        """
        Gets the query of this PrcRecommendationByIdRequest.
        Set here the filters. The value is the query string you want to apply. \r\nCan be BOOL expressions. You can use these: AND, OR, NOT. \r\nFor example: 'searchforthis AND NOT butnotthis'. \r\nAlso you can use wildcards. For example: 'exampl*'. \r\nIf you want to search in a specified field, than do this: 'title:searchthisinthetitle'

        :return: The query of this PrcRecommendationByIdRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """
        Sets the query of this PrcRecommendationByIdRequest.
        Set here the filters. The value is the query string you want to apply. \r\nCan be BOOL expressions. You can use these: AND, OR, NOT. \r\nFor example: 'searchforthis AND NOT butnotthis'. \r\nAlso you can use wildcards. For example: 'exampl*'. \r\nIf you want to search in a specified field, than do this: 'title:searchthisinthetitle'

        :param query: The query of this PrcRecommendationByIdRequest.
        :type: str
        """
        self._query = query


    @property
    def count(self):
        """
        Gets the count of this PrcRecommendationByIdRequest.


        :return: The count of this PrcRecommendationByIdRequest.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this PrcRecommendationByIdRequest.


        :param count: The count of this PrcRecommendationByIdRequest.
        :type: int
        """
        self._count = count


    @property
    def need_document_in_result(self):
        """
        Gets the need_document_in_result of this PrcRecommendationByIdRequest.


        :return: The need_document_in_result of this PrcRecommendationByIdRequest.
        :rtype: bool
        """
        return self._need_document_in_result

    @need_document_in_result.setter
    def need_document_in_result(self, need_document_in_result):
        """
        Sets the need_document_in_result of this PrcRecommendationByIdRequest.


        :param need_document_in_result: The need_document_in_result of this PrcRecommendationByIdRequest.
        :type: bool
        """
        self._need_document_in_result = need_document_in_result


    @property
    def tag_id(self):
        """
        Gets the tag_id of this PrcRecommendationByIdRequest.


        :return: The tag_id of this PrcRecommendationByIdRequest.
        :rtype: str
        """
        return self._tag_id

    @tag_id.setter
    def tag_id(self, tag_id):
        """
        Sets the tag_id of this PrcRecommendationByIdRequest.


        :param tag_id: The tag_id of this PrcRecommendationByIdRequest.
        :type: str
        """
        self._tag_id = tag_id


    @property
    def weights(self):
        """
        Gets the weights of this PrcRecommendationByIdRequest.


        :return: The weights of this PrcRecommendationByIdRequest.
        :rtype: list[Weight]
        """
        return self._weights

    @weights.setter
    def weights(self, weights):
        """
        Sets the weights of this PrcRecommendationByIdRequest.


        :param weights: The weights of this PrcRecommendationByIdRequest.
        :type: list[Weight]
        """
        self._weights = weights


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



