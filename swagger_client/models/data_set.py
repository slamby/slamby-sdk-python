# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class DataSet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DataSet - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'n_gram_count': 'int',
            'id_field': 'str',
            'tag_field': 'str',
            'interpreted_fields': 'list[str]',
            'statistics': 'DataSetStats',
            'sample_document': 'Object'
        }

        self.attribute_map = {
            'name': 'Name',
            'n_gram_count': 'NGramCount',
            'id_field': 'IdField',
            'tag_field': 'TagField',
            'interpreted_fields': 'InterpretedFields',
            'statistics': 'Statistics',
            'sample_document': 'SampleDocument'
        }


        self._name = None

        self._n_gram_count = None

        self._id_field = None

        self._tag_field = None

        self._interpreted_fields = None

        self._statistics = None

        self._sample_document = None



    @property
    def name(self):
        """
        Gets the name of this DataSet.


        :return: The name of this DataSet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DataSet.


        :param name: The name of this DataSet.
        :type: str
        """
        self._name = name


    @property
    def n_gram_count(self):
        """
        Gets the n_gram_count of this DataSet.


        :return: The n_gram_count of this DataSet.
        :rtype: int
        """
        return self._n_gram_count

    @n_gram_count.setter
    def n_gram_count(self, n_gram_count):
        """
        Sets the n_gram_count of this DataSet.


        :param n_gram_count: The n_gram_count of this DataSet.
        :type: int
        """
        self._n_gram_count = n_gram_count


    @property
    def id_field(self):
        """
        Gets the id_field of this DataSet.


        :return: The id_field of this DataSet.
        :rtype: str
        """
        return self._id_field

    @id_field.setter
    def id_field(self, id_field):
        """
        Sets the id_field of this DataSet.


        :param id_field: The id_field of this DataSet.
        :type: str
        """
        self._id_field = id_field


    @property
    def tag_field(self):
        """
        Gets the tag_field of this DataSet.


        :return: The tag_field of this DataSet.
        :rtype: str
        """
        return self._tag_field

    @tag_field.setter
    def tag_field(self, tag_field):
        """
        Sets the tag_field of this DataSet.


        :param tag_field: The tag_field of this DataSet.
        :type: str
        """
        self._tag_field = tag_field


    @property
    def interpreted_fields(self):
        """
        Gets the interpreted_fields of this DataSet.


        :return: The interpreted_fields of this DataSet.
        :rtype: list[str]
        """
        return self._interpreted_fields

    @interpreted_fields.setter
    def interpreted_fields(self, interpreted_fields):
        """
        Sets the interpreted_fields of this DataSet.


        :param interpreted_fields: The interpreted_fields of this DataSet.
        :type: list[str]
        """
        self._interpreted_fields = interpreted_fields


    @property
    def statistics(self):
        """
        Gets the statistics of this DataSet.


        :return: The statistics of this DataSet.
        :rtype: DataSetStats
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """
        Sets the statistics of this DataSet.


        :param statistics: The statistics of this DataSet.
        :type: DataSetStats
        """
        self._statistics = statistics


    @property
    def sample_document(self):
        """
        Gets the sample_document of this DataSet.


        :return: The sample_document of this DataSet.
        :rtype: Object
        """
        return self._sample_document

    @sample_document.setter
    def sample_document(self, sample_document):
        """
        Sets the sample_document of this DataSet.


        :param sample_document: The sample_document of this DataSet.
        :type: Object
        """
        self._sample_document = sample_document


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



