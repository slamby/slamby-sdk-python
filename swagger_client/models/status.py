# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""



from pprint import pformat
from six import iteritems


class Status(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Status - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'api_version': 'str',
            'processor_count': 'int',
            'cpu_usage': 'float',
            'available_free_space': 'float',
            'total_memory': 'float',
            'free_memory': 'float'
        }

        self.attribute_map = {
            'api_version': 'ApiVersion',
            'processor_count': 'ProcessorCount',
            'cpu_usage': 'CpuUsage',
            'available_free_space': 'AvailableFreeSpace',
            'total_memory': 'TotalMemory',
            'free_memory': 'FreeMemory'
        }


        self._api_version = None

        self._processor_count = None

        self._cpu_usage = None

        self._available_free_space = None

        self._total_memory = None

        self._free_memory = None



    @property
    def api_version(self):
        """
        Gets the api_version of this Status.


        :return: The api_version of this Status.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """
        Sets the api_version of this Status.


        :param api_version: The api_version of this Status.
        :type: str
        """
        self._api_version = api_version


    @property
    def processor_count(self):
        """
        Gets the processor_count of this Status.


        :return: The processor_count of this Status.
        :rtype: int
        """
        return self._processor_count

    @processor_count.setter
    def processor_count(self, processor_count):
        """
        Sets the processor_count of this Status.


        :param processor_count: The processor_count of this Status.
        :type: int
        """
        self._processor_count = processor_count


    @property
    def cpu_usage(self):
        """
        Gets the cpu_usage of this Status.


        :return: The cpu_usage of this Status.
        :rtype: float
        """
        return self._cpu_usage

    @cpu_usage.setter
    def cpu_usage(self, cpu_usage):
        """
        Sets the cpu_usage of this Status.


        :param cpu_usage: The cpu_usage of this Status.
        :type: float
        """
        self._cpu_usage = cpu_usage


    @property
    def available_free_space(self):
        """
        Gets the available_free_space of this Status.


        :return: The available_free_space of this Status.
        :rtype: float
        """
        return self._available_free_space

    @available_free_space.setter
    def available_free_space(self, available_free_space):
        """
        Sets the available_free_space of this Status.


        :param available_free_space: The available_free_space of this Status.
        :type: float
        """
        self._available_free_space = available_free_space


    @property
    def total_memory(self):
        """
        Gets the total_memory of this Status.


        :return: The total_memory of this Status.
        :rtype: float
        """
        return self._total_memory

    @total_memory.setter
    def total_memory(self, total_memory):
        """
        Sets the total_memory of this Status.


        :param total_memory: The total_memory of this Status.
        :type: float
        """
        self._total_memory = total_memory


    @property
    def free_memory(self):
        """
        Gets the free_memory of this Status.


        :return: The free_memory of this Status.
        :rtype: float
        """
        return self._free_memory

    @free_memory.setter
    def free_memory(self, free_memory):
        """
        Sets the free_memory of this Status.


        :param free_memory: The free_memory of this Status.
        :type: float
        """
        self._free_memory = free_memory


    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other



